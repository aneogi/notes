
---------------------------------- 1. Managing images ----------------------------------

1.3 Creating image from container
	(i) docker images
	(ii) docker rmi <ImageId>
	(iii) docker images 
	(iv) docker rmi -f <ImageId>
			==> Delete image forcefully as it is used by container
	(v) docker run ubuntu:14.04 /bin/echo 'Hello World'
			==> Docker found that the local was not local, downloaded the image and echoed on the terminal

1.4 Publishing an image to the registry
	(i) docker pull training/sinatra
	(ii) docker images
			==> sinatra image has been downloaded
	(iii) docker run -t -i training/sinatra /bin/bash  
			==> Command line of the image comes up
	(iv) Create a Dockerfile:
			FROM ubuntu:14.04
			MAINTAINER Avirup Neogi <aneogi13@gmail.com>
			RUN apt-get update && apt-get install -y ruby ruby-dev
			RUN gem install sinatra
	(v) docker build -t hendryrobert/sinatra:v2 .
			==> Build an image from an existing image
	(vi) docker push hendryrobert/sinatra
			==> Pushes the image into dockerhub
			
1.5 Examining Image History
	(i) docker history <ImageId>
			==> Layers of the image
	(ii) docker images
			==> training/sinatra has tag as latest
	(iii) docker tag <ImageId> training/sinatra:prod
	(iv) docker images
			==> training/sinatra has tag as prod
	
1.5 Importing, Deleting and Exporting images
	(i) docker pull busybox
			==> Download image from dockerhub. If url is known then import can be used as well.
	(ii) docker run busybox mkdir /home/test
	(iii) docker commit <ContainerId> busybox-1
			==> Saves all the changes on the container to local and this creates a new image
	(iv) docker export --output="mylatest.tar" <ContainerId>
			==> Creates a tar file from the file system within a container
	(v) docker rmi <ContainerId> 
			==> Deletes busybox-1 image

---------------------------------- 2. Managing image layers ----------------------------------


---------------------------------- 3. Working with Dockerfile ----------------------------------

3.1. Building images using a dockerfile
	(i) Create a Dockerfile:
			FROM oraclelinux:6.6
			MAINTAINER A N Other <aneogi13@gmail.com>
			RUN sed -i -e '/^\[main\]/aproxy=http://proxy.mydom.com:80' /etc/yum.conf
			RUN yum -y install httpd
			RUN echo "HTTP server is running on port guest" > /var/www/html/index.html
			EXPOSE 80
			ENTRYPOINT /usr/sbin/httpd -D FOREGROUND
	(ii) docker build -t my_server .
			==> Since the oraclelinux images is not present therefore the image is getting downloaded. Then the next the steps are getting executed.
	(iii) docker run -d --name myguest2 -P oraclelinux
			==> If the image was not installed previously then this command will download the image and run it.

3.2. Building an Apache image
	(i) docker rmi <<httpd_image_id>>
	(ii) Create a Dockerfile:
			FROM httpd:2.4
	(iii) docker build -t my-apache2 .
	(iv) docker run -t -i my_apache2

3.3. Accessing Firefox from Container
	(i) Create a Dockerfile:
			FROM ubuntu:14.04
			RUN apt-get update && apt-get install -y firefox
			# Replace 1000 with user/groupid
			RUN export uid=1000 gid=1000 && \
				mkdir -p /home/developer && \
				echo "developer:x:${uid}:${gid}:Developer,,,:/home/developer:/bin/bash" >> /etc/passwd && \
				echo "developer:x:${uid}:" >> /etc/group && \
				echo "developer ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/developer && \
				chmod 0440 /etc/sudoers.d/developer &&
				chown ${uid}:${gid} -R /home/developer
			USER developer
			ENV HOME /home/developer
			CMD /usr/bin/firefox
	(ii) docker build -t firefox .
	(iii) docker run -ti --rm -e DISPLAY=$DISPLAY -v /tmp/.X11-unix/tmp/.X11-unix firefox
				
3.4. Building a WordPress image
	(i) rm wordpress, md wordpress, cd wordpress
	(ii) docker ps -a, docker images
	(iii) docker rmi debian:jessie, docker rmi <<wordpress_image_id>>
	(iii) docker rm <<wordpress_container_id>>

---------------------------------- 4. Advanced Docker Volumes ----------------------------------

4.1. Building from Basic Volumes
	(i) Containers interact with each other by Volumes. Volumes are file systems external to container that are used by container to read/write data.
	(ii) docker run -v /www --name="bobexample1" ubuntu:14.04 echo yo
			==> Run a container and create a volume.
	(iii) docker ps -acls
	(iv) docker inspect bobexample1
			==> Details of the container. Volume info in "Mounts" section.
	(v) docker run -v /host/logs:/container/logs --name="bobmamaexamle" ubuntu:14:04 echo mama
			==> /host/logs (Source) will be hosted as /container/logs (Destination) inside the container. Info present in "Mounts" section.

4.2. Gaining Access to Volumes
	(i) Containers can persist data using Volumes.
	(ii) docker-machine ls
			==> List of Docker Machines e.g. VirtualBox, DigitalOcean etc.
	(iii) Login to VirtualBox
		(a) cd var/lib/docker/volumes
		(b) ls -a 
				==> All Volume information. 

4.3. Configuring the Web Server (nginx)
	(i) docker build -t hendry/xginx .
			==> Fetch the image from dockerhub, download dependencies, install and run nginx.
	(ii) Dockerfile:
			FROM debian:jessie
			MAINTAINER NGINX Docker Maintainers "docker-main@nginx.com"
			RUN apt-key adv --keyserver hkp://pgp.mit.edu:80 --recv-keys 573BF........
			RUN echo "deb http://nginx.org/packages/mainline/debian/ jessie nginx" >> /etc/apt/sources.list
			ENV NGINX_VERSION 1.9.8-1~jessie
			RUN apt-get update && \
				apt-get install -y ca-certificates nginx=${NGINX_VERSION} && \
				rm -rf /var/lib/apt/lists/*
			#forward request and error logs to docker log collector
			RUN ln -sf /dev/stdout /var/log/nginx/access.log
			RUN ln -sf /dev/stderr /var/log/nginx/error.log
			VOLUME ["/var/cache/nginx"]
			EXPOSE 80 443
			CMD ["nginx", "-g", "daemon off;"]
	(ii) docker run -d -p 80:80 hendry/xginx
			==> Map port 80 of the container to port 80 of the host
	(iii) docker ps 
			==> Shows that the container is running on port 80.
	(iv) docker network inspect bridge
			==> Container Network details
	(v) docker-machine ls
			==> Note down the host ip.
	(vi) Go to browser and hit the host ip and port 80
			==> Request redirected to nginx running on port 80 of container.
			
4.4. Using Map Generator
	(i) cd "C:\program files\docker toolbox\installers"
	(ii) cd virtual box and then maps
	(iii) cd maps and then create two folder got and virtual box
	(iv) Folder structure
			docker toolbox
				- installers
					- git
					- maps
						- git
						- virtualbox
					- virtualbox
	(v) If all the image files (i.e. maps) are placed within the maps directory then those will be automatically picked up by docker.
					
4.5. Running Container Server
	(i) Containers are persisted as well.
	(ii) docker rm <<ContainerId>>
			==> Deletes the Container but the Volume is persisted as long as it is not manually deleted.
	(iii) docker rm -v <<ContainerId>>
			==> Deletes the Container and the associated Volumes.
	(iv) docker run -v /bobfolder --name=bobcontainer ubuntu:14.04 echo hello world
			==> Volume is created and it remains even when the container is not running.
	(v) docker run -v --volumes-from bobcontainer --name=bobcontainer2 ubuntu:14.04 echo hello world
			==> Don't create a volume. Share the volume created by bobcontainer
	(vi) docker inspect bobcontainer2
			==> Uses the same volume as bobcontainer
	(vii) docker rm -v bobcontainer2
			==> Deletes the container and the associated volume for bobcontainer.
			
4.6. Creating a Stack with Volumes
	(i) Mount volumes and share volumes across containers
	(ii) docker stop <<ContainerName>>
	(iii) docker run -v /bobstuff/morestuff --name=bobservice -d busybox
			==> Mounts /bobstuff/morestuff volume (as directory structure) on host m/c. The volume will be used by the service being started. Image is busybox.
	(iv) docker run -d -p 80:80 --volumes-from bobservice hendry/xginx
			==> Start the container and uses the volumes of bobservice i.e. /bobstuff/morestuff. Container name is reverent_spence
	(v) docker inspect reverent_spence
			==> Mounts info shows "Destination" as /bobstuff/morestuff

---------------------------------- 5. Networking in Docker ----------------------------------

5.1 Command line options in Docker
	(i) docker network ls
			==> Shows all the networks
	(ii) docker network create simple-network-bob
			==> Creates a bridge network.
	(iii) docker network inspect simple-network-bob
			==> Details of the network
	(iv) docker network rm simple-network
			==> Deletes a network
	(v) docker network
			==> List of all thedocker network commands
			
5.2 Configuring DNS
	(i) docker run -itd --name=bobcontainer1 busybox
			==> Run container bobcontainer1 based on image busybox
	(ii) docker attach bobcontainer1
			==> Allows to attach to the container and a blank prompt comes up
			==> Hitting the enter button returns the command prompt within the container
			(a) cat /etc/hosts
					==> returns hosts files within the container
			(b) ipconfig
					==> DNS configuration within the container
			(c) mount
					==> Mount information
			
5.3 Communication between containers
	(i) docker-machine ls
			==> List of virtual machines
	(ii) docker network ls
			==> List of networks, default is bridge
	(iii) docker network inspect bridge
			==> Network details with subnet info
	(iv) docker run -itd --name=bobcontainer1 busybox
	(v) docker run -itd --name=bobcontainer2 busybox
	(vi) docker network inspect bridge
			==> Details of running containers bobcontainer1, bobcontainer2 are present in "Containers" section
	(vii) docker ps
			==> Returns containers bobcontainer1 and bobcontainer2
	(viii) docker run -itd --name=bobcontainer10 --net=bob_network busybox
			==> Creates bobcontainer10 in bob_network
	(ix) docker ps
			==> Returns containers bobcontainer1, bobcontainer2 and bobcontainer10
			
5.4 Communication between containers and outside world
	(i) docker run -itd --name=bobcontainer1 busybox
	(ii) docker run -itd --name=bobcontainer2 busybox
	(iii) docker network inspect bridge
			==> Details of running containers bobcontainer1, bobcontainer2 are present in "Containers" section
	(iv) docker ps
			==> Both the containers have ports as null which means that the ports are not accessible from outside the network.
	(v) Login to VirtualBox
			(a) iptables -t nat -L -n
					==> Both the containers have MASQUERADE with destination as 0.0.0.0/0 which means when the container contacts with anything outside the machine, it will see the ip of the machine and not the container.
			
5.5 Binding Docker Container ports to the host
	(i) docker run -itd --name=bobexample1 busybox
	(ii) docker ps
			==> Port is null therefore bobexample1 can talk to resources outside the machine but no one can talk to bobexample1
	(iii) docker stop bobexample1
	(iv) docker rm -v bobexample1
	(v) docker run -d -P training/webapp python app.py
			==> Map any incoming port on the machine to the corresponding port on the container
	(vi) docker ps
			==> Port now has a value e.g. 0.0.0.0:32769 which means it is open to communication on that port
	(vii) docker stop thirsty_davinci
	(viii) docker rm -v thirsty_davinci
	(ix) docker run -d -p 80:5000 training/webapp python app.py
			==> Any traffic on port 80 on the machine wil be routed to port 5000 on the python container. (0.0.0.0:80 -> 5000)
	(x) docker port berseck_hopper
			==> 5000/tcp -> 0.0.0.0:80 
	(xi) docker-machine ip my-default-hendry
			==> 192.168.99.100
	(xii) Open 192.168.99.100:80
			==> Response from the container
			
5.6 Using Pipework
	(i) docker network ls
	(ii) docker run -itd --name=bobexample1 busybox
	(iii) docker network inspect bridge
	(iv) docker run -itd --name=bobexample2 --net=bob_network busybox
	(v) docker network inspect bob_network
	(vi) docker run -d -p 80:5000 my/Thing python app.py
	(vi) pipework eth0 mysql 10.1.1.1/24
			==> Links the physical connection to the container
	(vii) pipework br0 mysql 10.1.1.1/24
			==> Links the network bridge to the container
	(viii) pipework ovsbr0 mysql 10.1.1.1/24
			==> Links the Open V Switch bridge to the container
	(ix) pipework ovsbr0 mysql dhcp
	(x) pipework ovsbr0 mysql dhcp @10


					
